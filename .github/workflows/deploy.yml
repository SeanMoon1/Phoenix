name: Deploy Phoenix

on:
  push:
    branches:
      - main

jobs:
  backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # ✅ Secrets 확인
      - name: Check Secrets
        run: |
          echo "BACK_HOST: ${{ secrets.BACK_HOST }}"
          echo "BACK_USER: ${{ secrets.BACK_USER }}"
          echo "BACK_SSH_KEY exists: ${{ secrets.BACK_SSH_KEY != '' }}"

      # ✅ .env 파일 생성
      - name: Create .env file
        run: |
          cat > Backend/.env <<EOL
          APP_NAME=${{ secrets.APP_NAME }}
          APP_VERSION=${{ secrets.APP_VERSION }}
          NODE_ENV=${{ secrets.NODE_ENV }}
          PORT=${{ secrets.PORT }}
          CORS_ORIGIN=${{ secrets.CORS_ORIGIN }}
          API_URL=${{ secrets.API_URL }}
          FRONTEND_URL=${{ secrets.FRONTEND_URL }}
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_DATABASE=${{ secrets.DB_DATABASE }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }}
          OAUTH_REDIRECT_BASE=${{ secrets.OAUTH_REDIRECT_BASE }}
          OAUTH_SUCCESS_REDIRECT=${{ secrets.OAUTH_SUCCESS_REDIRECT }}
          OAUTH_FAILURE_REDIRECT=${{ secrets.OAUTH_FAILURE_REDIRECT }}
          GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_CALLBACK_URL=${{ secrets.GOOGLE_CALLBACK_URL }}
          GOOGLE_CALLBACK_PATH=${{ secrets.GOOGLE_CALLBACK_PATH }}
          NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}
          NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }}
          NAVER_CALLBACK_URL=${{ secrets.NAVER_CALLBACK_URL }}
          NAVER_CALLBACK_PATH=${{ secrets.NAVER_CALLBACK_PATH }}
          NAVER_SERVICE_URL=${{ secrets.NAVER_SERVICE_URL }}
          KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}
          KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }}
          KAKAO_CALLBACK_URL=${{ secrets.KAKAO_CALLBACK_URL }}
          KAKAO_CALLBACK_PATH=${{ secrets.KAKAO_CALLBACK_PATH }}
          INITIAL_ADMIN_LOGIN_ID=${{ secrets.INITIAL_ADMIN_LOGIN_ID }}
          INITIAL_ADMIN_PASSWORD=${{ secrets.INITIAL_ADMIN_PASSWORD }}
          INITIAL_ADMIN_NAME=${{ secrets.INITIAL_ADMIN_NAME }}
          INITIAL_ADMIN_EMAIL=${{ secrets.INITIAL_ADMIN_EMAIL }}
          INITIAL_ADMIN_PHONE=${{ secrets.INITIAL_ADMIN_PHONE }}
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION=${{ secrets.AWS_REGION }}
          AWS_SES_FROM_EMAIL=${{ secrets.AWS_SES_FROM_EMAIL }}
          AWS_SES_TO_EMAIL=${{ secrets.AWS_SES_TO_EMAIL }}
          GMAIL_CLIENT_ID=${{ secrets.GMAIL_CLIENT_ID }}
          GMAIL_CLIENT_SECRET=${{ secrets.GMAIL_CLIENT_SECRET }}
          GMAIL_REDIRECT_URIS=${{ secrets.GMAIL_REDIRECT_URIS }}
          GMAIL_SCOPES=${{ secrets.GMAIL_SCOPES }}
          LOG_LEVEL=${{ secrets.LOG_LEVEL }}
          MEMORY_AUTH_TTL=${{ secrets.MEMORY_AUTH_TTL }}
          MEMORY_AUTH_MAX_ATTEMPTS=${{ secrets.MEMORY_AUTH_MAX_ATTEMPTS }}
          MEMORY_AUTH_CLEANUP_INTERVAL=${{ secrets.MEMORY_AUTH_CLEANUP_INTERVAL }}
          EOL

      # ✅ SSH 연결 테스트
      - name: Test SSH connection
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.BACK_HOST }}
          username: ${{ secrets.BACK_USER }}
          key: ${{ secrets.BACK_SSH_KEY }}
          script: |
            echo "✅ SSH 연결 성공"
            whoami
            pwd

      # ✅ 코드 + .env만 서버로 복사
      - name: Copy backend source to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.BACK_HOST }}
          username: ${{ secrets.BACK_USER }}
          key: ${{ secrets.BACK_SSH_KEY }}
          source: "Backend/**"
          target: "/home/ubuntu/apps/Phoenix/"

      # ✅ 서버에서 빌드 + pm2 재시작
      - name: Build & Restart backend on server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.BACK_HOST }}
          username: ${{ secrets.BACK_USER }}
          key: ${{ secrets.BACK_SSH_KEY }}
          script: |
            cd /home/ubuntu/apps/Phoenix/Backend
            echo "✅ 서버에서 npm install & build 시작"
            npm install
            npm run build
            pm2 restart phoenix-backend || pm2 start dist/src/main.js --name phoenix-backend

  frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.19.0
          cache: "npm"

      # ✅ 서버에서 기존 Frontend 삭제 후 최신 코드 클론
      - name: Clean & Clone Frontend repo on server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.FRONT_HOST }}
          username: ${{ secrets.FRONT_USER }}
          key: ${{ secrets.FRONT_SSH_KEY }}
          script: |
            echo "✅ 기존 Frontend 삭제"
            rm -rf /home/ubuntu/apps/Phoenix
            cd /home/ubuntu/apps
            echo "✅ Git clone 실행"
            git clone -b main https://github.com/${{ github.repository }} Phoenix

      # ✅ 서버에서 빌드 실행
      - name: Build frontend on server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.FRONT_HOST }}
          username: ${{ secrets.FRONT_USER }}
          key: ${{ secrets.FRONT_SSH_KEY }}
          script: |
            cd /home/ubuntu/apps/Phoenix/Frontend
            npm ci
            npm install --save-dev rollup
            echo "VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }}" > .env
            echo "VITE_SCENARIO_DATA_SOURCE=${{ secrets.VITE_SCENARIO_DATA_SOURCE }}" >> .env
            npm run build
            echo "✅ 빌드 완료"

      # ✅ Nginx 재시작
      - name: Restart nginx
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.FRONT_HOST }}
          username: ${{ secrets.FRONT_USER }}
          key: ${{ secrets.FRONT_SSH_KEY }}
          script: |
            echo "✅ 서버에서 Frontend/dist 확인:"
            ls -alh /home/ubuntu/apps/Phoenix/Frontend/dist || true
            sudo systemctl restart nginx

