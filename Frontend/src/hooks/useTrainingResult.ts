import { useCallback } from 'react';
import { trainingApi, trainingResultApi, userExpApi } from '@/services/api';
import { useAuthStore } from '@/stores/authStore';

// ÏãúÎÇòÎ¶¨Ïò§ ÌÉÄÏûÖÏùÑ APIÏö©ÏúºÎ°ú Î≥ÄÌôòÌïòÎäî Ìï®Ïàò
const getScenarioTypeForApi = (scenarioType: string): string => {
  const typeMap: Record<string, string> = {
    fire: 'FIRE',
    'first-aid': 'EMERGENCY',
    'traffic-accident': 'TRAFFIC',
    earthquake: 'EARTHQUAKE',
    flood: 'FLOOD',
  };
  return typeMap[scenarioType] || 'FIRE';
};

export function useTrainingResult() {
  const { user } = useAuthStore();

  const saveTrainingResult = useCallback(
    async (opts: {
      scenarioSetName: string;
      scenarioType?: string;
      expSystemState: { level: number; totalCorrect: number };
      gameStateSummary: {
        scenariosCount: number;
        startTimeMs?: number;
        failedThisRun?: boolean;
      };
    }) => {
      if (!user) return { ok: false, error: 'no-user' };
      try {
        const timeSpent = opts.gameStateSummary.startTimeMs
          ? Math.floor((Date.now() - opts.gameStateSummary.startTimeMs) / 1000)
          : 0;
        const scenarioIdMap: Record<string, number> = {
          fire: 1, // FIRE
          'first-aid': 3, // EMERGENCY (ÏùëÍ∏âÏ≤òÏπò)
          'traffic-accident': 4, // TRAFFIC (ÍµêÌÜµÏÇ¨Í≥†)
          earthquake: 2, // EARTHQUAKE (ÏßÄÏßÑ)
          flood: 5, // FLOOD (ÌôçÏàò)
        };
        const sessionData: any = {
          sessionName: `${opts.scenarioSetName} ÌõàÎ†®`,
          scenarioId: scenarioIdMap[opts.scenarioType || 'fire'] || 1,
          startTime: new Date(
            opts.gameStateSummary.startTimeMs ?? Date.now()
          ).toISOString(),
          endTime: new Date().toISOString(),
          status: 'completed',
          createdBy: user.id,
          teamId: user.teamId || null, // ÏÇ¨Ïö©ÏûêÏùò ÌåÄ ID Ï∂îÍ∞Ä (ÏóÜÏúºÎ©¥ null)
        };
        const session = await trainingApi.createSession(sessionData as any);
        const sessionId = (session.data as any)?.id;
        const resultData = {
          sessionId,
          // participantIdÎäî Ï†úÍ±∞ - ÏÑúÎ≤ÑÏóêÏÑú ÏûêÎèôÏúºÎ°ú ÏÉùÏÑ±ÌïòÎèÑÎ°ù Ìï®
          scenarioId: scenarioIdMap[opts.scenarioType || 'fire'] || 1,
          scenarioType: getScenarioTypeForApi(opts.scenarioType || 'fire'), // ÏãúÎÇòÎ¶¨Ïò§ ÌÉÄÏûÖ Ï∂îÍ∞Ä
          userId: user.id,
          resultCode: `RESULT${Date.now()}`,
          accuracyScore:
            opts.gameStateSummary.scenariosCount > 0
              ? Math.round(
                  (opts.expSystemState.totalCorrect /
                    opts.gameStateSummary.scenariosCount) *
                    100
                )
              : 0,
          speedScore:
            timeSpent <= 45
              ? 100
              : Math.max(0, Math.round(100 - (timeSpent - 45) / 3)), // 45Ï¥à Ïù¥ÎÇ¥ = 100Ï†ê, Í∑∏ Ïù¥ÌõÑ 3Ï¥àÎãπ 1Ï†ê Í∞êÏ†ê
          totalScore:
            opts.gameStateSummary.scenariosCount > 0
              ? Math.round(
                  (opts.expSystemState.totalCorrect /
                    opts.gameStateSummary.scenariosCount) *
                    100 *
                    0.7 + // Ï†ïÌôïÎèÑ 70% Í∞ÄÏ§ëÏπò
                    (timeSpent <= 45
                      ? 100
                      : Math.max(0, Math.round(100 - (timeSpent - 45) / 3))) *
                      0.3 // ÏÜçÎèÑ 30% Í∞ÄÏ§ëÏπò
                )
              : 0,
          completionTime: timeSpent,
          feedback: `${opts.scenarioSetName} ÏôÑÎ£å - Î†àÎ≤® ${opts.expSystemState.level}, Ï†ïÎãµ ${opts.expSystemState.totalCorrect}/${opts.gameStateSummary.scenariosCount}`,
          completedAt: new Date().toISOString(),
        };
        console.log('üì§ ÌõàÎ†® Í≤∞Í≥º Ï†ÄÏû• ÏãúÎèÑ:', {
          ...resultData,
          scenarioType: resultData.scenarioType,
          totalScore: resultData.totalScore,
          accuracyScore: resultData.accuracyScore,
          speedScore: resultData.speedScore,
          completionTime: resultData.completionTime,
        });

        const saveResult = await trainingResultApi.save(resultData);
        console.log('‚úÖ ÌõàÎ†® Í≤∞Í≥º Ï†ÄÏû• ÏÑ±Í≥µ:', {
          success: saveResult.success,
          data: saveResult.data,
          error: saveResult.error,
        });

        // ÏÑúÎ≤ÑÏóê Í≤ΩÌóòÏπò Ï†ïÎ≥¥ Ï†ÑÏÜ°
        try {
          const expToAdd = Math.round(
            (opts.expSystemState.totalCorrect /
              opts.gameStateSummary.scenariosCount) *
              50
          ); // Ï†ïÎãµÎ•†Ïóê Îî∞Î•∏ Í≤ΩÌóòÏπò
          await userExpApi.updateUserExp({
            userId: user.id,
            expToAdd,
            totalScore: resultData.totalScore,
            completedScenarios: 1,
          });
          console.log('‚úÖ ÏÑúÎ≤ÑÏóê Í≤ΩÌóòÏπò Ï†ïÎ≥¥ Ï†ÑÏÜ° ÏôÑÎ£å');
        } catch (expError) {
          console.error('‚ùå ÏÑúÎ≤Ñ Í≤ΩÌóòÏπò ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®:', expError);
          // Í≤ΩÌóòÏπò ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®Ìï¥ÎèÑ ÌõàÎ†® Í≤∞Í≥ºÎäî Ï†ÄÏû•Îêú ÏÉÅÌÉúÎ°ú Ï≤òÎ¶¨
        }

        return { ok: true };
      } catch (err) {
        console.error('‚ùå useTrainingResult.saveTrainingResult Ïã§Ìå®:', {
          error: err,
          message: (err as any)?.message || 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò',
          stack: (err as any)?.stack,
          data: {
            scenarioSetName: opts.scenarioSetName,
            scenarioType: opts.scenarioType,
            userId: user?.id,
          },
        });
        return { ok: false, error: err };
      }
    },
    [user]
  );

  return { saveTrainingResult };
}
